class Solution
{
    public:
   Node* bst(int s,int e,vector<int>in)
    {
        if(s>e)
        return NULL;
        int mid=(s+e)/2;
        Node* root=new Node(in[mid]);
        root->left=bst(s,mid-1,in);
        root->right=bst(mid+1,e,in);
        return root;
    }
    void merge(vector<int>v1,vector<int>v2,vector<int>&ans)
    {
        int i=0,j=0,k=0;
        while(i<v1.size() && j<v2.size())
        {
             if (v1[i] < v2[j])
               ans.push_back(v1[i++]);
             else
              ans.push_back(v2[j++]);
        }
         while (i < v1.size())
            ans.push_back(v1[i++]);

        while (j < v2.size())
            ans.push_back(v2[j++]);
    }
    void inorder(Node* root,vector<int>&v)
    {
        if(root==NULL)
        return;
        inorder(root->left,v);
        v.push_back(root->data);
        inorder(root->right,v);
    }
    vector<int> merge(Node *root1, Node *root2)
    {
        vector<int>v1;
        vector<int>v2;
        inorder(root1,v1);
        inorder(root2,v2);
        vector<int>ans;
       merge(v1,v2,ans);
        Node* root=bst(0,ans.size()-1,ans);
        vector<int>final;
        inorder(root,ans);
        return ans;

    }
};
